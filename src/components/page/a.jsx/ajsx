import React from "react";
import NoteContainerHeader from "./1-header/NoteContainerHeader";
import NoteInputItem from "./NoteInputItem";
import { getInitialData } from "../utils/data";
import NoteListItem from "./2-item-body/NoteListItem";
import NoteListArchive from "./3-item-archive/NoteListArchive";

import "../styles/NotesApp.css";

class NotesApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      notes: getInitialData(),
      search: "",
    };

    this.onDeleteHandler = this.onDeleteHandler.bind(this);
    this.onArchiveHandler = this.onArchiveHandler.bind(this);
    this.onAddNoteHandler = this.onAddNoteHandler.bind(this);
    this.onUndoHandler = this.onUndoHandler.bind(this);
    this.onNoteSearchHandler = this.onNoteSearchHandler.bind(this);
  }

  onDeleteHandler(id) {
    const notes = this.state.notes.filter((note) => note.id !== id);
    this.setState({ notes });
  }

  onArchiveHandler(id) {
    const notes = this.state.notes.map((note) => {
      if (note.id === id) {
        if (note.archived === false) {
          return { ...note, archived: true };
        } else {
          return { ...note, archived: false };
        }
      }
      return note;
    });
    this.setState({ notes });
  }

  onAddNoteHandler({ title, body }) {
    this.setState((prevState) => {
      return {
        notes: [
          ...prevState.notes,
          {
            id: +new Date(),
            title,
            body,
            archived: false,
            createdAt: new Date().toDateString(),
          },
        ],
      };
    });
  }

  onUndoHandler(id) {
    const notes = this.state.notes.filter((note) => note.id === id);
    const undoNotes = (notes[0].archived = false);
    this.setState({ undoNotes });
  }

  onNoteSearchHandler(event) {
    this.setState(() => {
      return {
        search: event.target.value,
      };
    });
  }

  render() {
    const notes = this.state.notes.filter((note) =>
      note.title.toLowerCase().includes(this.state.search.toLowerCase())
    );
    const enableNotes = notes.filter((note) => {
      return note.archived === false;
    });
    const archivedNotes = notes.filter((note) => {
      return note.archived === true;
    });

    return (
      <>
        <NoteContainerHeader
          search={this.state.search}
          onSearchChange={this.onNoteSearchHandler}
        />
        <NoteInputItem addNote={this.onAddNoteHandler} />
        <h2>Catatan Aktif</h2>
        <br />
        {enableNotes.length !== 0 ? (
          <NoteListItem
            notes={enableNotes}
            text="Arsipkan"
            onDelete={this.onDeleteHandler}
            onArchive={this.onArchiveHandler}
          />
        ) : (
          <p className="notes-list__empty-message">Tidak ada catatan</p>
        )}
        <h2>Arsip</h2>
        <br />
        {archivedNotes.length !== 0 ? (
          <NoteListArchive
            notes={archivedNotes}
            text="Pindahkan"
            onDelete={this.onDeleteHandler}
            onArchive={this.onArchiveHandler}
            onUndo={this.onUndoHandler}
          />
        ) : (
          <p className="notes-list__empty-message">Tidak ada catatan</p>
        )}
      </>
    );
  }
}

export default NotesApp;
